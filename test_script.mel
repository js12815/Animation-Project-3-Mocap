/* Array to contain all the mocap markers */
string $markers[] = {"LFHD", "RFHD", "LBHD", "RBHD", "C7", "T10", "CLAV", "STRN", "RBAC", "LSHO", "LUPA", "LELB", 
"LFRM", "LWRA", "LWRB", "LFIN", "RSHO", "RUPA", "RELB", "RFRM", "RWRA", "RWRB", "RFIN", 
"LFWT", "RFWT", "LBWT", "RBWT", "LTHI", "LKNE", "LSHN", "LANK", "LHEE", "LTOE", "LMT5", 
"RTHI", "RKNE", "RSHN", "RANK", "RHEE", "RTOE", "RMT5"};

//string $markers[] = `ls -type "transform" -long`;
//print (size($markers));

/* Test function: createCubes loops through all the mocap markers and creates a cube 
   at the position of each marker */
proc createCubes(string $markers[]) {
    for( $i = 0; $i < size($markers); $i++) {
        
        //Get x, y, and z positions for each marker.
        string $currentMarker = $markers[$i];
        $x = `getAttr ($currentMarker + ".translateX")`;
        $y = `getAttr ($currentMarker + ".translateY")`;
        $z = `getAttr ($currentMarker + ".translateZ")`;
        
        //Create a cube and move it to that position
        polyCube -w 5.0 -h 5.0 -d 5.0;
        move -a $x $y $z;
    }
}

/* Test function to create a polygon with vertices at the mocap marker
   positions for a single frame. */
proc createPoly(string $markers[]) {
    
    string $buildCommand = "polyCreateFacet -n \"createdMesh\"";
    for( $i = 0; $i < size($markers); $i++) {
        //Get x, y, and z positions for each marker.
        string $currentMarker = $markers[$i];
        float $x = `getAttr ($currentMarker + ".translateX")`;
        float $y = `getAttr ($currentMarker + ".translateY")`;
        float $z = `getAttr ($currentMarker + ".translateZ")`;
        
        if($i == size($markers) - 1) {
            $buildCommand = $buildCommand + "-p" + " " + $x + " " + $y + " " + $z;
        } else {
            $buildCommand = $buildCommand + "-p" + " " + $x + " " + $y + " " + $z + " ";
        }
    }
    //polyCreateFacet $buildCommand;
    eval $buildCommand;
}

/* Create a polygonal strip following a marker 
   Works but it doesn't generate dynamically */
proc createStrip(string $markers[], int $endFrame, int $markerNum) {
    
    string $currentMarker = $markers[$markerNum];
    string $cmd = "polyCreateFacet ";
    
    for($i = 1; $i <= $endFrame; $i++) {
        currentTime $i;
        
        float $x = `getAttr ($currentMarker + ".translateX")`;
        float $y = `getAttr ($currentMarker + ".translateY")`;
        float $z = `getAttr ($currentMarker + ".translateZ")`;
        
        if($i == $endFrame) {
            $cmd += "-p" + " " + $x + " " + $y + " " + $z;
        } else {
            $cmd += "-p" + " " + $x + " " + $y + " " + $z + " ";
        }
    }
    eval $cmd;
}

proc createSmallStrips(string $markers[], int $endFrame, int $markerNum) {
    
    string $currentMarker = $markers[$markerNum];
    //string $cmd = "polyCreateFacet ";
    
    for($i = 1; $i <= $endFrame; $i += 1) {
        
        
        string $cmd = "polyCreateFacet ";
        currentTime $i;
        
        float $x = `getAttr ($currentMarker + ".translateX")`;
        float $y = `getAttr ($currentMarker + ".translateY")`;
        float $z = `getAttr ($currentMarker + ".translateZ")`;
        
        $cmd += "-p" + " " + $x + " " + $y + " " + $z + " ";
        
        //currentTime ($i+1);
        currentTime ($i+2);
        
        $x = `getAttr ($currentMarker + ".translateX")`;
        $y = `getAttr ($currentMarker + ".translateY")`;
        $z = `getAttr ($currentMarker + ".translateZ")`;
        
        $cmd += "-p" + " " + $x + " " + $y + " " + $z + " ";
        
        //currentTime ($i+2);
        currentTime ($i+4);
        
        $x = `getAttr ($currentMarker + ".translateX")`;
        $y = `getAttr ($currentMarker + ".translateY")`;
        $z = `getAttr ($currentMarker + ".translateZ")`;
        
        $cmd += "-p" + " " + $x + " " + $y + " " + $z;
        
        eval $cmd;
    }
    
}

/* Weird slow broken function */
proc createSmallStripsAllMarkers(string $markers[], int $endFrame, int $jump) {
    
    //string $currentMarker = $markers[$markerNum];
    //string $cmd = "polyCreateFacet ";
    
    float $x;
    float $y;
    float $z;
    //string $command_array[(size($markers))]; 
    //int $test = size($markers);
    
    //print($test);
    string $command_array[41];
    
    for($i = 1; $i <= $endFrame; $i += $jump) {
        
        
        for($j = 0; $j < size($markers); $j++) {
            $command_array[$j] = "polyCreateFacet ";
        }
        
        
        for($j = 0; $j < size($markers); $j++) {
            
            string $currentMarker = $markers[$j];
            
            currentTime $i;
        
            $x = `getAttr ($currentMarker + ".translateX")`;
            $y = `getAttr ($currentMarker + ".translateY")`;
            $z = `getAttr ($currentMarker + ".translateZ")`;
            
            string $test = $command_array[$j];
        
            $command_array[$j] = $test + "-p" + " " + $x + " " + $y + " " + $z + " ";
        }
        
        
        for($j = 0; $j < size($markers); $j++) {
            
            string $currentMarker = $markers[$j];
            //currentTime ($i+1);
            currentTime ($i+2);
        
            $x = `getAttr ($currentMarker + ".translateX")`;
            $y = `getAttr ($currentMarker + ".translateY")`;
            $z = `getAttr ($currentMarker + ".translateZ")`;
        
            string $test = $command_array[$j];
        
            $command_array[$j] = $test + "-p" + " " + $x + " " + $y + " " + $z + " ";
        }
        
        
        
        for($j = 0; $j < size($markers); $j++) {
            
            string $currentMarker = $markers[$j];
            //currentTime ($i+2);
            currentTime ($i+4);
        
            $x = `getAttr ($currentMarker + ".translateX")`;
            $y = `getAttr ($currentMarker + ".translateY")`;
            $z = `getAttr ($currentMarker + ".translateZ")`;
        
            string $test = $command_array[$j];
        
            $command_array[$j] = $test + "-p" + " " + $x + " " + $y + " " + $z + " ";
        }
        
        
        for($j = 0; $j < size($markers); $j++) {
            eval $command_array[$j];
        }
        
    }
    
}



/* Test function to call a function on each frame. */
proc createEveryFrame(string $markers[], int $endFrame){
    
    for( $i = 1; $i <= $endFrame; $i++) {
        currentTime $i;
        //createCubes($markers);
        createPoly($markers);
    }    
}

/* Uncomment one of these tests to see shit happen
   Be warned that createCubesEveryFrame is kind of slow on my computer.
   Dunno how it'll be like on your computer but my comp has a pretty good graphics card*/
//createCubes($markers);
//createPoly($markers);
//createEveryFrame($markers, 350);
//createStrip($markers, 350, 0);
//createSmallStrips($markers, 350, 0);
createSmallStripsAllMarkers($markers, 20, 4);